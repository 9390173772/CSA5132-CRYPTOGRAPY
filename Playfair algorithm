#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
void prepareKey(char key[], char keyMatrix[][SIZE]) {
    int i, j, k;
    char alphabets[26] = "ABCDEFGHIKLMNOPQRSTUVWXYZ"; // Ignoring 'J'
    for (i = 0; i < strlen(key); ++i) {
        if (key[i] == 'J') {
            key[i] = 'I'; // Replace 'J' with 'I'
        }
        for (j = i + 1; key[j] != '\0'; ++j) {
            if (key[i] == key[j]) {
                for (k = j; key[k] != '\0'; ++k) {
                    key[k] = key[k + 1];
                }
            }
        }
    }
    k = 0; 
    for (i = 0; i < SIZE; ++i) {
        for (j = 0; j < SIZE; ++j) {
            if (k < strlen(key)) {
                keyMatrix[i][j] = key[k++];
            } else {
                while (strchr(key, alphabets[k]) != NULL) {
                    ++k;
                }
                keyMatrix[i][j] = alphabets[k++];
            }
        }
    }
}
void encrypt(char message[], char keyMatrix[][SIZE]) {
    int i, j, row1, col1, row2, col2;
    char encrypted[100] = "";
    for (i = 0; message[i] != '\0'; i += 2) {
        char first = message[i];
        char second = (message[i + 1] == '\0') ? 'X' : message[i + 1]; // If message length is odd, pad X
        if (first == second) {
            second = 'X';
            ++i; 
        }
        for (j = 0; j < SIZE; ++j) {
            if (strchr(keyMatrix[j], first) != NULL) {
                row1 = j;
                col1 = strchr(keyMatrix[j], first) - keyMatrix[j];
                break;
            }
        }
        for (j = 0; j < SIZE; ++j) {
            if (strchr(keyMatrix[j], second) != NULL) {
                row2 = j;
                col2 = strchr(keyMatrix[j], second) - keyMatrix[j];
                break;
            }
        }
        if (row1 == row2) {
            encrypted[strlen(encrypted)] = keyMatrix[row1][(col1 + 1) % SIZE];
            encrypted[strlen(encrypted)] = keyMatrix[row2][(col2 + 1) % SIZE];
        } 
        else if (col1 == col2) {
            encrypted[strlen(encrypted)] = keyMatrix[(row1 + 1) % SIZE][col1];
            encrypted[strlen(encrypted)] = keyMatrix[(row2 + 1) % SIZE][col2];
        } 
        else {
            encrypted[strlen(encrypted)] = keyMatrix[row1][col2];
            encrypted[strlen(encrypted)] = keyMatrix[row2][col1];
        }
    }
    printf("Encrypted message: %s\n", encrypted);
}
int main() {
    char key[100], message[100];
    char keyMatrix[SIZE][SIZE];
    printf("Enter the key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0';
    printf("Enter the message: ");
    fgets(message, sizeof(message), stdin);
    message[strcspn(message, "\n")] = '\0';
    prepareKey(key, keyMatrix);
    encrypt(message, keyMatrix);
    return 0;
}
