#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
void removeSpacesAndPunctuation(char *plaintext) {
    int i, j = 0;
    for (i = 0; plaintext[i] != '\0'; i++) {
        if (isalpha(plaintext[i])) {
            plaintext[j++] = toupper(plaintext[i]);
        }
    }
    plaintext[j] = '\0';
}
void prepareKeyword(char keyword[], char keyMatrix[][SIZE]) {
    int i, j, k;
    char alphabets[26] = "ABCDEFGHIKLMNOPQRSTUVWXYZ";
    for (i = 0; i < strlen(keyword); ++i) {
        if (keyword[i] == 'J') {
            keyword[i] = 'I';
        }
        for (j = i + 1; keyword[j] != '\0'; ++j) {
            if (keyword[i] == keyword[j]) {
                for (k = j; keyword[k] != '\0'; ++k) {
                    keyword[k] = keyword[k + 1];
                }
            }
        }
    }
    k = 0;
    for (i = 0; i < SIZE; ++i) {
        for (j = 0; j < SIZE; ++j) {
            if (k < strlen(keyword)) {
                keyMatrix[i][j] = keyword[k++];
            } else {
                while (strchr(keyword, alphabets[k]) != NULL) {
                    ++k;
                }
                keyMatrix[i][j] = alphabets[k++];
            }
        }
    }
}
void findPositions(char keyMatrix[][SIZE], char a, char b, int *row1, int *col1, int *row2, int *col2) {
    int i, j;
    for (i = 0; i < SIZE; ++i) {
        for (j = 0; j < SIZE; ++j) {
            if (keyMatrix[i][j] == a) {
                *row1 = i;
                *col1 = j;
            }
            if (keyMatrix[i][j] == b) {
                *row2 = i;
                *col2 = j;
            }
        }
    }
}
void encryptPlayfair(char plaintext[], char keyMatrix[][SIZE], char ciphertext[]) {
    int i, row1, col1, row2, col2;
    int len = strlen(plaintext);
    int index = 0;

    for (i = 0; i < len; i += 2) {
        char first = plaintext[i];
        char second = (plaintext[i + 1] == '\0') ? 'X' : plaintext[i + 1];
        if (first == second) {
            second = 'X';
            --i;
        }
        findPositions(keyMatrix, first, second, &row1, &col1, &row2, &col2);
        if (row1 == row2) {
            ciphertext[index++] = keyMatrix[row1][(col1 + 1) % SIZE];
            ciphertext[index++] = keyMatrix[row2][(col2 + 1) % SIZE];
        }
        else if (col1 == col2) {
            ciphertext[index++] = keyMatrix[(row1 + 1) % SIZE][col1];
            ciphertext[index++] = keyMatrix[(row2 + 1) % SIZE][col2];
        }
        else {
            ciphertext[index++] = keyMatrix[row1][col2];
            ciphertext[index++] = keyMatrix[row2][col1];
        }
    }
    ciphertext[index] = '\0';
}
int main() {
    char plaintext[] = "Must see you over Cadogan West. Coming at once.";
    char keyword[] = "PLAYFAIR";
    char keyMatrix[SIZE][SIZE];
    char ciphertext[100];
    removeSpacesAndPunctuation(plaintext);
    prepareKeyword(keyword, keyMatrix);
    encryptPlayfair(plaintext, keyMatrix, ciphertext);
    printf("Encrypted message: %s\n", ciphertext);
    return 0;
}
